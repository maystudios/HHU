name: Automatische Tests

on: 
  push:
    branches:
    - '*'
    - '!badges'
  
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  build:
    name: Automatische Tests
    runs-on: [self-hosted, linux, java]
    steps:
      - uses: mickem/clean-after-action@v2
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - name: Prüfe Abgabe mit automatischen Tests
        timeout-minutes: 10
        run: |
          cd test && gradle --console=rich test | tee tests.log
          exit ${PIPESTATUS[0]}

      - name: Prüfe Programmier-Stil
        timeout-minutes: 10
        if: always()
        run: |
          cd test && ./checkstyle.bash gradle

      - name: Bestimme Punktzahl anhand der Testergebnisse
        id: testpoints
        if: always()
        run: |
          echo "points=Fehler" >> $GITHUB_ENV
          POINTS="$( grep --text "Test.*Punk" test/tests.log | grep --text "PASSED" | sed -E "s/.*\[.*([0-9]+) Punkte?\].*/\1/" | paste -sd+ | sed "s/^$/0/" | bc )"
          echo "points=${POINTS}" >> $GITHUB_ENV
          TOTALPOINTS="$( grep --text -R "\@DisplayName" test/java | sed -E "s/.*\[.*([0-9]+) Punkte?\].*/\1/" | paste -sd+ | bc )"
          echo "totalpoints=${TOTALPOINTS}" >> $GITHUB_ENV
          echo ${POINTS} / ${TOTALPOINTS} Punkte erreicht
          
          echo "stylepoints=Fehler" >> $GITHUB_ENV
          STYLEPOINTS="$( grep --text "Style Checks" test/tests.log | grep --text "PASSED" | wc -l )"
          echo "stylepoints=${STYLEPOINTS}" >> $GITHUB_ENV
          echo ${STYLEPOINTS} / 1 Stil-Punkte erreicht

      - name: Erstelle Verzeichnis für Punktzahl-Badge
        if: always()
        run: |
          git checkout badges 2> /dev/null || git checkout -b badges
          mkdir -p .github/badges
        
      - name: Erstelle Punktzahl-Badge
        uses: emibcn/badge-action@v2.0.2
        if: always()
        with:
          LABEL: 'Voraussichtliche Punktzahl'
          STATUS: "${{env.points}} / ${{env.totalpoints}}"
          COLOR: ${{
                env.points == 0 && 'red' ||
                env.points == env.totalpoints && 'green' ||
                'yellow' }}
          SCALE: 2
          path: '.github/badges/points.svg'
        
      - name: Erstelle Stil-Punktzahl-Badge
        uses: emibcn/badge-action@v2.0.2
        if: always()
        with:
          LABEL: 'Stil-Punkte'
          STATUS: "${{env.stylepoints}} / 1"
          COLOR: ${{
                env.stylepoints == 0 && 'red' ||
                'green' }}
          SCALE: 2
          path: '.github/badges/stylepoints.svg'

      - name: Übernehme neue Punktzahl-Badges
        id: commitbadge
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '.github/badges/points.svg'
          git add '.github/badges/stylepoints.svg'
          git commit -m "Add/Update badge"
        continue-on-error: true

      - name: Lade neue Punktzahl-Badges hoch
        uses: ad-m/github-push-action@master
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: badges
          force: true
